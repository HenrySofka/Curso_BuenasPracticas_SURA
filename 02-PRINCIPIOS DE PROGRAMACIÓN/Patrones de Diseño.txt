Patrones de Diseño
- Los patrones de diseño de software son una serie de técnicas que nos permite resolver una 
  serie de problemas comunes que se presentan en el diseño, desarrollo e interacción de software. 

- Las principales ventajas de usar patrones de diseño son:
    - Ahorro de tiempo: Los patrones de diseño brindan "trucos" para resolver de manera eficiente
      los problemas sin "reinventar la rueda".
    - Validez del codigo: Al ser usados por muchas personas al rededor de los años, ya estan consolidados.
    - Lenguaje común: Al implementar la orientación a objetos y sus características los patrones 
      de diseño son independientes de lenguajes de programación, su interpretación y explicación 
      se da al nivel del paradigma y no del lenguaje de alto nivel que lo implemente. 

- El catalogo de patrones de diseño cuenta con un total de 23 patrones distribuidos en 3 categorías 
  según el tipo de problema que resuelven:
    - Patrones creacionales:
        - Esta categoría provee varios mecanismos que permiten la creación de nuevos objetos.
        - Estos patrones se basan en dos conceptos:
            - Encapsular:
                - Al encapsular los tipos concretos que nuestro sistema utiliza.
                - Al trabajar con interfaces, la interpretación concreta que utilicemos queda aislada.
            - Ocultar:
                - Cómo estas implementaciones concretas necesitan ser creadas y cómo se combinan entre sí.
        
        - Factory Method: 
            - Expone un método de creación,  delegando en las subclases la implementación de este método.
        - Abstract Factory:
            - Nos provee una interfaz que delega la creación de un conjunto de objetos relacionados 
            sin necesidad de especificar en ningún momento cuáles son las implementaciones concretas.
        - Builder: 
            - Separa la creación de un objeto complejo de su estructura, de tal forma que el mismo 
            proceso de construcción nos puede servir para crear representaciones diferentes.
        - Prototype:
            - Permite la creación de objetos basados en "plantillas".
            - Un nuevo objeto se crea a partir de la clonación de otro objeto.
        - Singleton: 
            - Limita a uno el número de instancias posibles en nuestro progrma, y proporciona un acceso
            global al mismo.


    - Patrones Estructurales:
        - Esta categoría provee varios mecanismos para especificar la forma que nuestras clases 
          se relacionan entre si.

        - Adapter: 
            - Permite a dos clases con diferentes interfaces trabajar entre ellas, a través de 
              un objeto intermedio con el que se comunican e interactúan.
        - Bridge:
            - Desacopla una abstracción de su implementación, para que las dos puedan
              evolucionar de forma independiente.
        - Composite: 
            - Facilita la creación de estructuras de objetos en árbol, donde todos los elementos 
              emplean una misma interfaz. Cada uno de ellos puede a su vez contener un listado 
              de esos objetos, o ser el último de esa rama
        - Decorator:
            - Permite añadir funcionalidad extra a un objeto (de forma dinámica o estática) 
              sin modificar el comportamiento del resto de objetos del mismo tipo.
        - Facade:
            - Una facade (o fachada) es un objeto que crea una interfaz simplificada para 
              tratar con otra parte del código más compleja, de tal forma que simplifica 
              y aísla su uso. Un ejemplo podría ser crear una fachada para tratar con una 
              clase de una librería externa
        - Flyweiht: 
            - Una gran cantidad de objetos comparten un mismo objeto con propiedade comunes con el 
              fin de ahorrar memoria.
        - Proxy:
            - Es una clase que funciona como interfaz hacia cualquier otra cosa: una conexión 
              a Internet, un archivo en disco o cualquier otro recurso que sea costoso o imposible de
              duplicar.

    - Patrones de Comportamiento:
        - En esta categoría se encuentran la mayoría de patrones al ser aquellos enfocados en gestionar
          el flujo de los algoritmos, las relaciones y responsabilidades entre objetos.
        
        - Chain of Responsibility:
            - Se evita acoplar al emisor y receptor de una petición dando la posibilidad a varios 
              receptores de consumirlo. Cada receptor tiene la opción de consumir esa petición }
              o pasárselo al siguiente dentro de la cadena.
        - Memenro:
            - Este patron otorga la capacidad de restaurar un objeto a un estado anterior
        - Template Method:
            - Especifica el esqueleto de un algoritmo, permitiendo a las subclases definir cómo
              implementan el compotamiento real
        - Command: 
            - Son objetos que encapsulan una acción y los parametros que necesita para ejecutarse
        - Observer:
            - Los objetos son capaces de suscribirse a una serie de eventos que otro 
              objetivo va a emitir, y serán avisados cuando esto ocurra
        - Visitor:
            - Permite separar el algoritmo de la estructura de datos que se utilizará para ejecutarlo. 
              De esta forma se pueden añadir nuevas operaciones a estas estructuras sin necesidad 
              de modificarlas
        - Iterator:
            - Se utiliza para poder movernos por los elementos de un conjunto de forma 
              secuencial sin necesidad de exponer su implementación específica
        - State:
            - Permite modificar la forma en que un objeto se comporta en tiempo de ejecución,
              basándose en su estado interno
        - Mediator:
            - Objeto que encapsula cómo otro conjunto de objetos interactúan y se comunican entre sí
        - Strategy: 
            - Permite la selección del algoritmo que se ejecuta cierta acción en tiempo de ejecución